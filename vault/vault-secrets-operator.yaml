---
# Source: crds/secrets.hashicorp.com_vaultauths.yaml
# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: vaultauths.secrets.hashicorp.com
spec:
  group: secrets.hashicorp.com
  names:
    kind: VaultAuth
    listKind: VaultAuthList
    plural: vaultauths
    singular: vaultauth
  scope: Namespaced
  versions:
  - name: v1beta1
    schema:
      openAPIV3Schema:
        description: VaultAuth is the Schema for the vaultauths API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: VaultAuthSpec defines the desired state of VaultAuth
            properties:
              allowedNamespaces:
                description: 'AllowedNamespaces Kubernetes Namespaces which are allow-listed
                  for use with this AuthMethod. This field allows administrators to
                  customize which Kubernetes namespaces are authorized to use with
                  this AuthMethod. While Vault will still enforce its own rules, this
                  has the added configurability of restricting which VaultAuthMethods
                  can be used by which namespaces. Accepted values: []{"*"} - wildcard,
                  all namespaces. []{"a", "b"} - list of namespaces. unset - disallow
                  all namespaces except the Operator''s the VaultAuthMethod''s namespace,
                  this is the default behavior.'
                items:
                  type: string
                type: array
              appRole:
                description: AppRole specific auth configuration, requires that the
                  Method be set to `appRole`.
                properties:
                  roleId:
                    description: RoleID of the AppRole Role to use for authenticating
                      to Vault.
                    type: string
                  secretRef:
                    description: SecretRef is the name of a Kubernetes secret in the
                      consumer's (VDS/VSS/PKI) namespace which provides the AppRole
                      Role's SecretID. The secret must have a key named `id` which
                      holds the AppRole Role's secretID.
                    type: string
                required:
                - roleId
                - secretRef
                type: object
              aws:
                description: AWS specific auth configuration, requires that Method
                  be set to `aws`.
                properties:
                  headerValue:
                    description: The Vault header value to include in the STS signing
                      request
                    type: string
                  iamEndpoint:
                    description: The IAM endpoint to use; if not set will use the
                      default
                    type: string
                  irsaServiceAccount:
                    description: 'IRSAServiceAccount name to use with IAM Roles for
                      Service Accounts (IRSA), and should be annotated with "eks.amazonaws.com/role-arn".
                      This ServiceAccount will be checked for other EKS annotations:
                      eks.amazonaws.com/audience and eks.amazonaws.com/token-expiration'
                    type: string
                  region:
                    description: AWS Region to use for signing the authentication
                      request
                    type: string
                  role:
                    description: Vault role to use for authenticating
                    type: string
                  secretRef:
                    description: SecretRef is the name of a Kubernetes Secret which
                      holds credentials for AWS. Expected keys include `access_key_id`,
                      `secret_access_key`, `session_token`
                    type: string
                  sessionName:
                    description: The role session name to use when creating a webidentity
                      provider
                    type: string
                  stsEndpoint:
                    description: The STS endpoint to use; if not set will use the
                      default
                    type: string
                required:
                - role
                type: object
              headers:
                additionalProperties:
                  type: string
                description: Headers to be included in all Vault requests.
                type: object
              jwt:
                description: JWT specific auth configuration, requires that the Method
                  be set to `jwt`.
                properties:
                  audiences:
                    description: TokenAudiences to include in the ServiceAccount token.
                    items:
                      type: string
                    type: array
                  role:
                    description: Role to use for authenticating to Vault.
                    type: string
                  secretRef:
                    description: SecretRef is the name of a Kubernetes secret in the
                      consumer's (VDS/VSS/PKI) namespace which provides the JWT token
                      to authenticate to Vault's JWT authentication backend. The secret
                      must have a key named `jwt` which holds the JWT token.
                    type: string
                  serviceAccount:
                    description: ServiceAccount to use when creating a ServiceAccount
                      token to authenticate to Vault's JWT authentication backend.
                    type: string
                  tokenExpirationSeconds:
                    default: 600
                    description: TokenExpirationSeconds to set the ServiceAccount
                      token.
                    format: int64
                    minimum: 600
                    type: integer
                required:
                - role
                type: object
              kubernetes:
                description: Kubernetes specific auth configuration, requires that
                  the Method be set to `kubernetes`.
                properties:
                  audiences:
                    description: TokenAudiences to include in the ServiceAccount token.
                    items:
                      type: string
                    type: array
                  role:
                    description: Role to use for authenticating to Vault.
                    type: string
                  serviceAccount:
                    description: ServiceAccount to use when authenticating to Vault's
                      kubernetes authentication backend.
                    type: string
                  tokenExpirationSeconds:
                    default: 600
                    description: TokenExpirationSeconds to set the ServiceAccount
                      token.
                    format: int64
                    minimum: 600
                    type: integer
                required:
                - role
                - serviceAccount
                type: object
              method:
                description: Method to use when authenticating to Vault.
                enum:
                - kubernetes
                - jwt
                - appRole
                - aws
                type: string
              mount:
                description: Mount to use when authenticating to auth method.
                type: string
              namespace:
                description: Namespace to auth to in Vault
                type: string
              params:
                additionalProperties:
                  type: string
                description: Params to use when authenticating to Vault
                type: object
              storageEncryption:
                description: 'StorageEncryption provides the necessary configuration
                  to encrypt the client storage cache. This should only be configured
                  when client cache persistence with encryption is enabled. This is
                  done by passing setting the manager''s commandline argument --client-cache-persistence-model=direct-encrypted.
                  Typically there should only ever be one VaultAuth configured with
                  StorageEncryption in the Cluster, and it should have the label:
                  cacheStorageEncryption=true'
                properties:
                  keyName:
                    description: KeyName to use for encrypt/decrypt operations via
                      Vault Transit.
                    type: string
                  mount:
                    description: Mount path of the Transit engine in Vault.
                    type: string
                required:
                - keyName
                - mount
                type: object
              vaultConnectionRef:
                description: "VaultConnectionRef to the VaultConnection resource,
                  can be prefixed with a namespace, eg: `namespaceA/vaultConnectionRefB`.
                  If no namespace prefix is provided it will default to namespace
                  of the VaultConnection CR. If no value is specified for VaultConnectionRef
                  the Operator will default to\t`default` VaultConnection, configured
                  in its own Kubernetes namespace."
                type: string
            required:
            - method
            - mount
            type: object
          status:
            description: VaultAuthStatus defines the observed state of VaultAuth
            properties:
              error:
                type: string
              valid:
                description: Valid auth mechanism.
                type: boolean
            required:
            - error
            - valid
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}

---
# Source: crds/secrets.hashicorp.com_vaultconnections.yaml
# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: vaultconnections.secrets.hashicorp.com
spec:
  group: secrets.hashicorp.com
  names:
    kind: VaultConnection
    listKind: VaultConnectionList
    plural: vaultconnections
    singular: vaultconnection
  scope: Namespaced
  versions:
  - name: v1beta1
    schema:
      openAPIV3Schema:
        description: VaultConnection is the Schema for the vaultconnections API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: VaultConnectionSpec defines the desired state of VaultConnection
            properties:
              address:
                description: Address of the Vault server
                type: string
              caCertSecretRef:
                description: CACertSecretRef is the name of a Kubernetes secret containing
                  the trusted PEM encoded CA certificate chain as `ca.crt`.
                type: string
              headers:
                additionalProperties:
                  type: string
                description: Headers to be included in all Vault requests.
                type: object
              skipTLSVerify:
                description: SkipTLSVerify for TLS connections.
                type: boolean
              tlsServerName:
                description: TLSServerName to use as the SNI host for TLS connections.
                type: string
            required:
            - address
            type: object
          status:
            description: VaultConnectionStatus defines the observed state of VaultConnection
            properties:
              valid:
                description: Valid auth mechanism.
                type: boolean
            required:
            - valid
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}

---
# Source: crds/secrets.hashicorp.com_vaultdynamicsecrets.yaml
# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: vaultdynamicsecrets.secrets.hashicorp.com
spec:
  group: secrets.hashicorp.com
  names:
    kind: VaultDynamicSecret
    listKind: VaultDynamicSecretList
    plural: vaultdynamicsecrets
    singular: vaultdynamicsecret
  scope: Namespaced
  versions:
  - name: v1beta1
    schema:
      openAPIV3Schema:
        description: VaultDynamicSecret is the Schema for the vaultdynamicsecrets
          API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: VaultDynamicSecretSpec defines the desired state of VaultDynamicSecret
            properties:
              allowStaticCreds:
                description: AllowStaticCreds should be set when syncing credentials
                  that are periodically rotated by the Vault server, rather than created
                  upon request. These secrets are sometimes referred to as "static
                  roles", or "static credentials", with a request path that contains
                  "static-creds".
                type: boolean
              destination:
                description: Destination provides configuration necessary for syncing
                  the Vault secret to Kubernetes.
                properties:
                  annotations:
                    additionalProperties:
                      type: string
                    description: Annotations to apply to the Secret. Requires Create
                      to be set to true.
                    type: object
                  create:
                    description: Create the destination Secret. If the Secret already
                      exists this should be set to false.
                    type: boolean
                  labels:
                    additionalProperties:
                      type: string
                    description: Labels to apply to the Secret. Requires Create to
                      be set to true.
                    type: object
                  name:
                    description: Name of the Secret
                    type: string
                  type:
                    description: Type of Kubernetes Secret. Requires Create to be
                      set to true. Defaults to Opaque.
                    type: string
                required:
                - name
                type: object
              mount:
                description: Mount path of the secret's engine in Vault.
                type: string
              namespace:
                description: Namespace where the secrets engine is mounted in Vault.
                type: string
              params:
                additionalProperties:
                  type: string
                description: Params that can be passed when requesting credentials/secrets.
                  When Params is set the configured RequestHTTPMethod will be ignored.
                  See RequestHTTPMethod for more details. Please consult https://developer.hashicorp.com/vault/docs/secrets
                  if you are uncertain about what 'params' should/can be set to.
                type: object
              path:
                description: Path in Vault to get the credentials for, and is relative
                  to Mount. Please consult https://developer.hashicorp.com/vault/docs/secrets
                  if you are uncertain about what 'path' should be set to.
                type: string
              renewalPercent:
                default: 67
                description: RenewalPercent is the percent out of 100 of the lease
                  duration when the lease is renewed. Defaults to 67 percent plus
                  jitter.
                maximum: 90
                minimum: 0
                type: integer
              requestHTTPMethod:
                description: RequestHTTPMethod to use when syncing Secrets from Vault.
                  Setting a value here is not typically required. If left unset the
                  Operator will make requests using the GET method. In the case where
                  Params are specified the Operator will use the PUT method. Please
                  consult https://developer.hashicorp.com/vault/docs/secrets if you
                  are uncertain about what method to use. Of note, the Vault client
                  treats PUT and POST as being equivalent. The underlying Vault client
                  implementation will always use the PUT method.
                enum:
                - GET
                - POST
                - PUT
                type: string
              revoke:
                description: Revoke the existing lease on VDS resource deletion.
                type: boolean
              rolloutRestartTargets:
                description: RolloutRestartTargets should be configured whenever the
                  application(s) consuming the Vault secret does not support dynamically
                  reloading a rotated secret. In that case one, or more RolloutRestartTarget(s)
                  can be configured here. The Operator will trigger a "rollout-restart"
                  for each target whenever the Vault secret changes between reconciliation
                  events. See RolloutRestartTarget for more details.
                items:
                  description: "RolloutRestartTarget provides the configuration required
                    to perform a rollout-restart of the supported resources upon Vault
                    Secret rotation. The rollout-restart is triggered by patching
                    the target resource's 'spec.template.metadata.annotations' to
                    include 'vso.secrets.hashicorp.com/restartedAt' with a timestamp
                    value of when the trigger was executed. E.g. vso.secrets.hashicorp.com/restartedAt:
                    \"2023-03-23T13:39:31Z\" \n Supported resources: Deployment, DaemonSet,
                    StatefulSet"
                  properties:
                    kind:
                      enum:
                      - Deployment
                      - DaemonSet
                      - StatefulSet
                      type: string
                    name:
                      type: string
                  required:
                  - kind
                  - name
                  type: object
                type: array
              vaultAuthRef:
                description: 'VaultAuthRef to the VaultAuth resource, can be prefixed
                  with a namespace, eg: `namespaceA/vaultAuthRefB`. If no namespace
                  prefix is provided it will default to namespace of the VaultAuth
                  CR. If no value is specified for VaultAuthRef the Operator will
                  default to the `default` VaultAuth, configured in its own Kubernetes
                  namespace.'
                type: string
            required:
            - destination
            - mount
            - path
            type: object
          status:
            description: VaultDynamicSecretStatus defines the observed state of VaultDynamicSecret
            properties:
              lastGeneration:
                description: LastGeneration is the Generation of the last reconciled
                  resource.
                format: int64
                type: integer
              lastRenewalTime:
                description: LastRenewalTime of the last successful secret lease renewal.
                format: int64
                type: integer
              lastRuntimePodUID:
                description: LastRuntimePodUID used for tracking the transition from
                  one Pod to the next. It is used to mitigate the effects of a Vault
                  lease renewal storm.
                type: string
              secretLease:
                description: SecretLease for the Vault secret.
                properties:
                  duration:
                    description: LeaseDuration of the Vault secret.
                    type: integer
                  id:
                    description: ID of the Vault secret.
                    type: string
                  renewable:
                    description: Renewable Vault secret lease
                    type: boolean
                  requestID:
                    description: RequestID of the Vault secret request.
                    type: string
                required:
                - duration
                - id
                - renewable
                - requestID
                type: object
              secretMAC:
                description: "SecretMAC used when deciding whether new Vault secret
                  data should be synced. \n The controller will compare the \"new\"
                  Vault secret data to this value using HMAC, if they are different,
                  then the data will be synced to the Destination. \n The SecretMac
                  is also used to detect drift in the Destination Secret's Data. If
                  drift is detected the data will be synced to the Destination. SecretMAC
                  will only be stored when VaultDynamicSecretSpec.AllowStaticCreds
                  is true."
                type: string
              staticCredsMetaData:
                description: StaticCredsMetaData contains the static creds response
                  meta-data
                properties:
                  lastVaultRotation:
                    description: LastVaultRotation represents the last time Vault
                      rotated the password
                    format: int64
                    type: integer
                  rotationPeriod:
                    description: RotationPeriod is number in seconds between each
                      rotation, effectively a "time to live". This value is compared
                      to the LastVaultRotation to determine if a password needs to
                      be rotated
                    format: int64
                    type: integer
                  ttl:
                    description: TTL is the seconds remaining before the next rotation.
                    format: int64
                    type: integer
                required:
                - lastVaultRotation
                - rotationPeriod
                - ttl
                type: object
            required:
            - lastGeneration
            - lastRenewalTime
            - secretLease
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}

---
# Source: crds/secrets.hashicorp.com_vaultpkisecrets.yaml
# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: vaultpkisecrets.secrets.hashicorp.com
spec:
  group: secrets.hashicorp.com
  names:
    kind: VaultPKISecret
    listKind: VaultPKISecretList
    plural: vaultpkisecrets
    singular: vaultpkisecret
  scope: Namespaced
  versions:
  - name: v1beta1
    schema:
      openAPIV3Schema:
        description: VaultPKISecret is the Schema for the vaultpkisecrets API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: VaultPKISecretSpec defines the desired state of VaultPKISecret
            properties:
              altNames:
                description: AltNames to include in the request May contain both DNS
                  names and email addresses.
                items:
                  type: string
                type: array
              clear:
                description: Clear the Kubernetes secret when the resource is deleted.
                type: boolean
              commonName:
                description: CommonName to include in the request.
                type: string
              destination:
                description: Destination provides configuration necessary for syncing
                  the Vault secret to Kubernetes. If the type is set to "kubernetes.io/tls",
                  "tls.key" will be set to the "private_key" response from Vault,
                  and "tls.crt" will be set to "certificate" + "ca_chain" from the
                  Vault response ("issuing_ca" is used when "ca_chain" is empty).
                  The "remove_roots_from_chain=true" option is used with Vault to
                  exclude the root CA from the Vault response.
                properties:
                  annotations:
                    additionalProperties:
                      type: string
                    description: Annotations to apply to the Secret. Requires Create
                      to be set to true.
                    type: object
                  create:
                    description: Create the destination Secret. If the Secret already
                      exists this should be set to false.
                    type: boolean
                  labels:
                    additionalProperties:
                      type: string
                    description: Labels to apply to the Secret. Requires Create to
                      be set to true.
                    type: object
                  name:
                    description: Name of the Secret
                    type: string
                  type:
                    description: Type of Kubernetes Secret. Requires Create to be
                      set to true. Defaults to Opaque.
                    type: string
                required:
                - name
                type: object
              excludeCNFromSans:
                description: 'ExcludeCNFromSans from DNS or Email Subject Alternate
                  Names. Default: false'
                type: boolean
              expiryOffset:
                description: ExpiryOffset to use for computing when the certificate
                  should be renewed. The rotation time will be difference between
                  the expiration and the offset. Should be in duration notation e.g.
                  30s, 120s, etc. Set to empty string "" to prevent certificate rotation.
                type: string
              format:
                description: 'Format for the certificate. Choices: "pem", "der", "pem_bundle".
                  If "pem_bundle", any private key and issuing cert will be appended
                  to the certificate pem. If "der", the value will be base64 encoded.
                  Default: pem'
                type: string
              ipSans:
                description: IPSans to include in the request.
                items:
                  type: string
                type: array
              issuerRef:
                description: IssuerRef reference to an existing PKI issuer, either
                  by Vault-generated identifier, the literal string default to refer
                  to the currently configured default issuer, or the name assigned
                  to an issuer. This parameter is part of the request URL.
                type: string
              mount:
                description: Mount for the secret in Vault
                type: string
              namespace:
                description: Namespace to get the secret from in Vault
                type: string
              notAfter:
                description: NotAfter field of the certificate with specified date
                  value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ
                type: string
              otherSans:
                description: Requested other SANs, in an array with the format oid;type:value
                  for each entry.
                items:
                  type: string
                type: array
              privateKeyFormat:
                description: 'PrivateKeyFormat, generally the default will be controlled
                  by the Format parameter as either base64-encoded DER or PEM-encoded
                  DER. However, this can be set to "pkcs8" to have the returned private
                  key contain base64-encoded pkcs8 or PEM-encoded pkcs8 instead. Default:
                  der'
                type: string
              revoke:
                description: Revoke the certificate when the resource is deleted.
                type: boolean
              role:
                description: Role in Vault to use when issuing TLS certificates.
                type: string
              rolloutRestartTargets:
                description: RolloutRestartTargets should be configured whenever the
                  application(s) consuming the Vault secret does not support dynamically
                  reloading a rotated secret. In that case one, or more RolloutRestartTarget(s)
                  can be configured here. The Operator will trigger a "rollout-restart"
                  for each target whenever the Vault secret changes between reconciliation
                  events. See RolloutRestartTarget for more details.
                items:
                  description: "RolloutRestartTarget provides the configuration required
                    to perform a rollout-restart of the supported resources upon Vault
                    Secret rotation. The rollout-restart is triggered by patching
                    the target resource's 'spec.template.metadata.annotations' to
                    include 'vso.secrets.hashicorp.com/restartedAt' with a timestamp
                    value of when the trigger was executed. E.g. vso.secrets.hashicorp.com/restartedAt:
                    \"2023-03-23T13:39:31Z\" \n Supported resources: Deployment, DaemonSet,
                    StatefulSet"
                  properties:
                    kind:
                      enum:
                      - Deployment
                      - DaemonSet
                      - StatefulSet
                      type: string
                    name:
                      type: string
                  required:
                  - kind
                  - name
                  type: object
                type: array
              ttl:
                description: 'TTL for the certificate; sets the expiration date. If
                  not specified the Vault role''s default, backend default, or system
                  default TTL is used, in that order. Cannot be larger than the mount''s
                  max TTL. Note: this only has an effect when generating a CA cert
                  or signing a CA cert, not when generating a CSR for an intermediate
                  CA. Should be in duration notation e.g. 120s, 2h, etc.'
                type: string
              uriSans:
                description: The requested URI SANs.
                items:
                  type: string
                type: array
              vaultAuthRef:
                description: 'VaultAuthRef to the VaultAuth resource, can be prefixed
                  with a namespace, eg: `namespaceA/vaultAuthRefB`. If no namespace
                  prefix is provided it will default to namespace of the VaultAuth
                  CR. If no value is specified for VaultAuthRef the Operator will
                  default to the `default` VaultAuth, configured in its own Kubernetes
                  namespace.'
                type: string
            required:
            - destination
            - mount
            - role
            type: object
          status:
            description: VaultPKISecretStatus defines the observed state of VaultPKISecret
            properties:
              error:
                type: string
              expiration:
                format: int64
                type: integer
              serialNumber:
                type: string
              valid:
                type: boolean
            required:
            - error
            - valid
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}

---
# Source: crds/secrets.hashicorp.com_vaultstaticsecrets.yaml
# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: vaultstaticsecrets.secrets.hashicorp.com
spec:
  group: secrets.hashicorp.com
  names:
    kind: VaultStaticSecret
    listKind: VaultStaticSecretList
    plural: vaultstaticsecrets
    singular: vaultstaticsecret
  scope: Namespaced
  versions:
  - name: v1beta1
    schema:
      openAPIV3Schema:
        description: VaultStaticSecret is the Schema for the vaultstaticsecrets API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: VaultStaticSecretSpec defines the desired state of VaultStaticSecret
            properties:
              destination:
                description: Destination provides configuration necessary for syncing
                  the Vault secret to Kubernetes.
                properties:
                  annotations:
                    additionalProperties:
                      type: string
                    description: Annotations to apply to the Secret. Requires Create
                      to be set to true.
                    type: object
                  create:
                    description: Create the destination Secret. If the Secret already
                      exists this should be set to false.
                    type: boolean
                  labels:
                    additionalProperties:
                      type: string
                    description: Labels to apply to the Secret. Requires Create to
                      be set to true.
                    type: object
                  name:
                    description: Name of the Secret
                    type: string
                  type:
                    description: Type of Kubernetes Secret. Requires Create to be
                      set to true. Defaults to Opaque.
                    type: string
                required:
                - name
                type: object
              hmacSecretData:
                default: true
                description: HMACSecretData determines whether the Operator computes
                  the HMAC of the Secret's data. The MAC value will be stored in the
                  resource's Status.SecretMac field, and will be used for drift detection
                  and during incoming Vault secret comparison. Enabling this feature
                  is recommended to ensure that Secret's data stays consistent with
                  Vault.
                type: boolean
              mount:
                description: Mount for the secret in Vault
                type: string
              namespace:
                description: Namespace to get the secret from in Vault
                type: string
              path:
                description: 'Path of the secret in Vault, corresponds to the `path`
                  parameter for, kv-v1: https://developer.hashicorp.com/vault/api-docs/secret/kv/kv-v1#read-secret
                  kv-v2: https://developer.hashicorp.com/vault/api-docs/secret/kv/kv-v2#read-secret-version'
                type: string
              refreshAfter:
                description: RefreshAfter a period of time, in duration notation
                type: string
              rolloutRestartTargets:
                description: RolloutRestartTargets should be configured whenever the
                  application(s) consuming the Vault secret does not support dynamically
                  reloading a rotated secret. In that case one, or more RolloutRestartTarget(s)
                  can be configured here. The Operator will trigger a "rollout-restart"
                  for each target whenever the Vault secret changes between reconciliation
                  events. All configured targets wil be ignored if HMACSecretData
                  is set to false. See RolloutRestartTarget for more details.
                items:
                  description: "RolloutRestartTarget provides the configuration required
                    to perform a rollout-restart of the supported resources upon Vault
                    Secret rotation. The rollout-restart is triggered by patching
                    the target resource's 'spec.template.metadata.annotations' to
                    include 'vso.secrets.hashicorp.com/restartedAt' with a timestamp
                    value of when the trigger was executed. E.g. vso.secrets.hashicorp.com/restartedAt:
                    \"2023-03-23T13:39:31Z\" \n Supported resources: Deployment, DaemonSet,
                    StatefulSet"
                  properties:
                    kind:
                      enum:
                      - Deployment
                      - DaemonSet
                      - StatefulSet
                      type: string
                    name:
                      type: string
                  required:
                  - kind
                  - name
                  type: object
                type: array
              type:
                description: Type of the Vault static secret
                enum:
                - kv-v1
                - kv-v2
                type: string
              vaultAuthRef:
                description: 'VaultAuthRef to the VaultAuth resource, can be prefixed
                  with a namespace, eg: `namespaceA/vaultAuthRefB`. If no namespace
                  prefix is provided it will default to namespace of the VaultAuth
                  CR. If no value is specified for VaultAuthRef the Operator will
                  default to the `default` VaultAuth, configured in its own Kubernetes
                  namespace.'
                type: string
              version:
                description: 'Version of the secret to fetch. Only valid for type
                  kv-v2. Corresponds to version query parameter: https://developer.hashicorp.com/vault/api-docs/secret/kv/kv-v2#version'
                minimum: 0
                type: integer
            required:
            - destination
            - mount
            - path
            - type
            type: object
          status:
            description: VaultStaticSecretStatus defines the observed state of VaultStaticSecret
            properties:
              secretMAC:
                description: "SecretMAC used when deciding whether new Vault secret
                  data should be synced. \n The controller will compare the \"new\"
                  Vault secret data to this value using HMAC, if they are different,
                  then the data will be synced to the Destination. \n The SecretMac
                  is also used to detect drift in the Destination Secret's Data. If
                  drift is detected the data will be synced to the Destination."
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}

---
# Source: vault-secrets-operator/templates/deployment.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-vault-secrets-operator-controller-manager
  namespace: vault
  labels:
    helm.sh/chart: vault-secrets-operator-0.2.0
    app.kubernetes.io/name: vault-secrets-operator
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: vault-secrets-operator/templates/manager-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-vault-secrets-operator-manager-config
  namespace: vault
  labels:
    app.kubernetes.io/component: controller-manager
    helm.sh/chart: vault-secrets-operator-0.2.0
    app.kubernetes.io/name: vault-secrets-operator
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
data:
  controller_manager_config.yaml: |
    apiVersion: controller-runtime.sigs.k8s.io/v1beta1
    health:
      healthProbeBindAddress: ":8081"
    kind: ControllerManagerConfig
    leaderElection:
      leaderElect: true
      resourceName: "b0d477c0.hashicorp.com"
    metrics:
      bindAddress: "127.0.0.1:8080"
    webhook:
      port: 9443
---
# Source: vault-secrets-operator/templates/manager-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: release-name-vault-secrets-operator-manager-role
  labels:
    app.kubernetes.io/component: controller-manager
    helm.sh/chart: vault-secrets-operator-0.2.0
    app.kubernetes.io/name: vault-secrets-operator
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - serviceaccounts
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - serviceaccounts/token
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - apps
  resources:
  - daemonsets
  verbs:
  - get
  - list
  - patch
  - watch
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - get
  - list
  - patch
  - watch
- apiGroups:
  - apps
  resources:
  - statefulsets
  verbs:
  - get
  - list
  - patch
  - watch
- apiGroups:
  - secrets.hashicorp.com
  resources:
  - vaultauths
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - secrets.hashicorp.com
  resources:
  - vaultauths/finalizers
  verbs:
  - update
- apiGroups:
  - secrets.hashicorp.com
  resources:
  - vaultauths/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - secrets.hashicorp.com
  resources:
  - vaultconnections
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - secrets.hashicorp.com
  resources:
  - vaultconnections/finalizers
  verbs:
  - update
- apiGroups:
  - secrets.hashicorp.com
  resources:
  - vaultconnections/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - secrets.hashicorp.com
  resources:
  - vaultdynamicsecrets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - secrets.hashicorp.com
  resources:
  - vaultdynamicsecrets/finalizers
  verbs:
  - update
- apiGroups:
  - secrets.hashicorp.com
  resources:
  - vaultdynamicsecrets/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - secrets.hashicorp.com
  resources:
  - vaultpkisecrets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - secrets.hashicorp.com
  resources:
  - vaultpkisecrets/finalizers
  verbs:
  - update
- apiGroups:
  - secrets.hashicorp.com
  resources:
  - vaultpkisecrets/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - secrets.hashicorp.com
  resources:
  - vaultstaticsecrets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - secrets.hashicorp.com
  resources:
  - vaultstaticsecrets/finalizers
  verbs:
  - update
- apiGroups:
  - secrets.hashicorp.com
  resources:
  - vaultstaticsecrets/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
# Source: vault-secrets-operator/templates/metrics-reader-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: release-name-vault-secrets-operator-metrics-reader
  labels:
    app.kubernetes.io/component: controller-manager
    helm.sh/chart: vault-secrets-operator-0.2.0
    app.kubernetes.io/name: vault-secrets-operator
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
rules:
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
# Source: vault-secrets-operator/templates/proxy-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: release-name-vault-secrets-operator-proxy-role
  labels:
    app.kubernetes.io/component: controller-manager
    helm.sh/chart: vault-secrets-operator-0.2.0
    app.kubernetes.io/name: vault-secrets-operator
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
# Source: vault-secrets-operator/templates/manager-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: release-name-vault-secrets-operator-manager-rolebinding
  labels:
    app.kubernetes.io/component: controller-manager
    helm.sh/chart: vault-secrets-operator-0.2.0
    app.kubernetes.io/name: vault-secrets-operator
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: 'release-name-vault-secrets-operator-manager-role'
subjects:
- kind: ServiceAccount
  name: 'release-name-vault-secrets-operator-controller-manager'
  namespace: vault
---
# Source: vault-secrets-operator/templates/proxy-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: release-name-vault-secrets-operator-proxy-rolebinding
  labels:
    app.kubernetes.io/component: controller-manager
    helm.sh/chart: vault-secrets-operator-0.2.0
    app.kubernetes.io/name: vault-secrets-operator
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: 'release-name-vault-secrets-operator-proxy-role'
subjects:
- kind: ServiceAccount
  name: 'release-name-vault-secrets-operator-controller-manager'
  namespace: vault
---
# Source: vault-secrets-operator/templates/leader-election-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-vault-secrets-operator-leader-election-role
  namespace: vault
  labels:
    app.kubernetes.io/component: controller-manager
    helm.sh/chart: vault-secrets-operator-0.2.0
    app.kubernetes.io/name: vault-secrets-operator
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
# Source: vault-secrets-operator/templates/leader-election-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-vault-secrets-operator-leader-election-rolebinding
  namespace: vault
  labels:
    app.kubernetes.io/component: controller-manager
    helm.sh/chart: vault-secrets-operator-0.2.0
    app.kubernetes.io/name: vault-secrets-operator
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: 'release-name-vault-secrets-operator-leader-election-role'
subjects:
- kind: ServiceAccount
  name: 'release-name-vault-secrets-operator-controller-manager'
  namespace: vault
---
# Source: vault-secrets-operator/templates/metrics-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-vault-secrets-operator-metrics-service
  namespace: vault
  labels:
    app.kubernetes.io/component: controller-manager
    control-plane: controller-manager
    helm.sh/chart: vault-secrets-operator-0.2.0
    app.kubernetes.io/name: vault-secrets-operator
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  selector:
    control-plane: controller-manager
    app.kubernetes.io/name: vault-secrets-operator
    app.kubernetes.io/instance: release-name
  ports:
  - name: https
    port: 8443
    protocol: TCP
    targetPort: https
---
# Source: vault-secrets-operator/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-vault-secrets-operator-controller-manager
  namespace: vault
  labels:
    control-plane: controller-manager
    app.kubernetes.io/component: controller-manager
    helm.sh/chart: vault-secrets-operator-0.2.0
    app.kubernetes.io/name: vault-secrets-operator
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: controller-manager
      app.kubernetes.io/name: vault-secrets-operator
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        control-plane: controller-manager
        app.kubernetes.io/name: vault-secrets-operator
        app.kubernetes.io/instance: release-name
      annotations:
        kubectl.kubernetes.io/default-container: manager
    spec:
      containers:
      - name: kube-rbac-proxy
        args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=0
        env:
        - name: KUBERNETES_CLUSTER_DOMAIN
          value: cluster.local
        image: gcr.io/kubebuilder/kube-rbac-proxy:v0.14.1
        ports:
        - containerPort: 8443
          name: https
          protocol: TCP
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 5m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
      - name: manager
        args:
        - --health-probe-bind-address=:8081
        - --metrics-bind-address=127.0.0.1:8080
        - --leader-elect
        command:
        - /vault-secrets-operator
        env:
        - name: OPERATOR_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: OPERATOR_POD_UID
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        - name: KUBERNETES_CLUSTER_DOMAIN
          value: cluster.local
        image: hashicorp/vault-secrets-operator:0.2.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
        volumeMounts:
        - mountPath: /var/run/podinfo
          name: podinfo
      securityContext:
        runAsNonRoot: true
      serviceAccountName: release-name-vault-secrets-operator-controller-manager
      terminationGracePeriodSeconds: 10
      volumes:
      - downwardAPI:
          items:
          - fieldRef:
              fieldPath: metadata.name
            path: name
          - fieldRef:
              fieldPath: metadata.uid
            path: uid
        name: podinfo
---
# Source: vault-secrets-operator/templates/tests/test-runner.yaml
apiVersion: v1
kind: Pod
metadata:
  name: release-name-vault-secrets-operator-test
  namespace: vault
  labels:
    app: vault-secrets-operator
    chart: vault-secrets-operator-0.2.0
    heritage: Helm
    release: release-name
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: vault-operator-test
      image: "hashicorp/vault-secrets-operator"
---
# Source: vault-secrets-operator/templates/deployment.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: pre-delete-controller-cleanup
  namespace: vault
  labels:
    helm.sh/chart: vault-secrets-operator-0.2.0
    app.kubernetes.io/name: vault-secrets-operator
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": pre-delete
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: release-name-vault-secrets-operator-pre-delete-controller-cleanup
    spec:
      serviceAccountName: release-name-vault-secrets-operator-controller-manager
      containers:
      - name: pre-delete-controller-cleanup
        image: hashicorp/vault-secrets-operator:0.2.0
        command:
        - /vault-secrets-operator
        args:
        - --finalizer-cleanup=true
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
      restartPolicy: Never
